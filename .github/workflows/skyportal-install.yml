name: API & frontend

on:
  pull_request:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: skyportal
          POSTGRES_PASSWORD: anything
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a
        # healthcheck
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      fail-fast: false
      matrix:
        test_subset: ["api_and_utils", "frontend_pt1", "frontend_pt2", "flaky"]

    steps:
      - uses: actions/setup-python@v1
        with:
          python-version: "3.8"

      - name: Checkout master
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: master
          submodules: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package.json') }}

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}

      - name: Write SkyPortal configs
        working-directory: ./skyportal
        run: |
          cat << EOF > config.yaml
            database:
              database: skyportal
              host: localhost
              port: 5432
              user: skyportal
              password: anything
          EOF
          cat << EOF > test_config.yaml
            database:
              database: skyportal_test
              user: skyportal
              host: localhost
              port: 5432
              password: anything
            server:
              auth:
                debug_login: True
          EOF
      - name: Install system dependencies
        working-directory: ./skyportal
        run: |
          curl -sL https://deb.nodesource.com/setup_17.x | sudo -E bash -
          sudo apt install -y wget nodejs unzip firefox nginx libcurl4-gnutls-dev libgnutls28-dev
          pip install pip==21.3.1
          pip install wheel numpy
          export NPM_PACKAGES="${HOME}/.npm-packages"
          export PATH=${NPM_PACKAGES}/bin:$PATH
          export NODE_PATH="$NPM_PACKAGES/lib/node_modules:$NODE_PATH"
          sudo npm -g install npm@latest
          which python; python --version
          echo npm $(npm --version)
          echo node $(node --version)
          nginx -v
          firefox --version

      - name: Initialize SkyPortal
        working-directory: ./skyportal
        run: |
          # Usually, we create databases on the local machine, so
          # `createdb` just works out of the box.  However, when doing
          # this on a server, as in our case, we need to specify extra
          # options.
          #
          # db_init should not complain if the databases exist already
          #
          echo "localhost:5432:*:skyportal:anything" > ~/.pgpass
          chmod 600 ~/.pgpass
          createdb -h localhost -U skyportal skyportal_test
          psql -U skyportal -h localhost -c "GRANT ALL PRIVILEGES ON DATABASE skyportal_test TO skyportal;" skyportal_test
          export NPM_CONFIG_LEGACY_PEER_DEPS="true"
          make db_init
          pip list --format=columns
          npm ls --depth 0 || true
          # Stamp Alembic HEAD
          PYTHONPATH=. alembic -x config=config.yaml stamp head

      - name: Run Skyportal
        working-directory: ./skyportal
        run: |
          make run
